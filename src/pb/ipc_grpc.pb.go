// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: ipc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IpcService_Status_FullMethodName            = "/ipc.IpcService/Status"
	IpcService_Unlock_FullMethodName            = "/ipc.IpcService/Unlock"
	IpcService_Shutdown_FullMethodName          = "/ipc.IpcService/Shutdown"
	IpcService_SetPassword_FullMethodName       = "/ipc.IpcService/SetPassword"
	IpcService_ListUTXOs_FullMethodName         = "/ipc.IpcService/ListUTXOs"
	IpcService_CreateTransaction_FullMethodName = "/ipc.IpcService/CreateTransaction"
)

// IpcServiceClient is the client API for IpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpcServiceClient interface {
	// Alive pings the daemon and returns true if the daemon is alive
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
	Unlock(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error)
	SetPassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	ListUTXOs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UTXOCollection, error)
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*RawTransaction, error)
}

type ipcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIpcServiceClient(cc grpc.ClientConnInterface) IpcServiceClient {
	return &ipcServiceClient{cc}
}

func (c *ipcServiceClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, IpcService_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipcServiceClient) Unlock(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, IpcService_Unlock_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipcServiceClient) Shutdown(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, IpcService_Shutdown_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipcServiceClient) SetPassword(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, IpcService_SetPassword_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipcServiceClient) ListUTXOs(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*UTXOCollection, error) {
	out := new(UTXOCollection)
	err := c.cc.Invoke(ctx, IpcService_ListUTXOs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipcServiceClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*RawTransaction, error) {
	out := new(RawTransaction)
	err := c.cc.Invoke(ctx, IpcService_CreateTransaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpcServiceServer is the server API for IpcService service.
// All implementations must embed UnimplementedIpcServiceServer
// for forward compatibility
type IpcServiceServer interface {
	// Alive pings the daemon and returns true if the daemon is alive
	Status(context.Context, *Empty) (*StatusResponse, error)
	Unlock(context.Context, *PasswordRequest) (*BoolResponse, error)
	Shutdown(context.Context, *Empty) (*BoolResponse, error)
	SetPassword(context.Context, *PasswordRequest) (*BoolResponse, error)
	ListUTXOs(context.Context, *Empty) (*UTXOCollection, error)
	CreateTransaction(context.Context, *CreateTransactionRequest) (*RawTransaction, error)
	mustEmbedUnimplementedIpcServiceServer()
}

// UnimplementedIpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIpcServiceServer struct {
}

func (UnimplementedIpcServiceServer) Status(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedIpcServiceServer) Unlock(context.Context, *PasswordRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedIpcServiceServer) Shutdown(context.Context, *Empty) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedIpcServiceServer) SetPassword(context.Context, *PasswordRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPassword not implemented")
}
func (UnimplementedIpcServiceServer) ListUTXOs(context.Context, *Empty) (*UTXOCollection, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUTXOs not implemented")
}
func (UnimplementedIpcServiceServer) CreateTransaction(context.Context, *CreateTransactionRequest) (*RawTransaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedIpcServiceServer) mustEmbedUnimplementedIpcServiceServer() {}

// UnsafeIpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpcServiceServer will
// result in compilation errors.
type UnsafeIpcServiceServer interface {
	mustEmbedUnimplementedIpcServiceServer()
}

func RegisterIpcServiceServer(s grpc.ServiceRegistrar, srv IpcServiceServer) {
	s.RegisterService(&IpcService_ServiceDesc, srv)
}

func _IpcService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpcServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpcService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpcServiceServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpcService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpcServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpcService_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpcServiceServer).Unlock(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpcService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpcServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpcService_Shutdown_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpcServiceServer).Shutdown(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpcService_SetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpcServiceServer).SetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpcService_SetPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpcServiceServer).SetPassword(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpcService_ListUTXOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpcServiceServer).ListUTXOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpcService_ListUTXOs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpcServiceServer).ListUTXOs(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpcService_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpcServiceServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IpcService_CreateTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpcServiceServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IpcService_ServiceDesc is the grpc.ServiceDesc for IpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipc.IpcService",
	HandlerType: (*IpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _IpcService_Status_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _IpcService_Unlock_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _IpcService_Shutdown_Handler,
		},
		{
			MethodName: "SetPassword",
			Handler:    _IpcService_SetPassword_Handler,
		},
		{
			MethodName: "ListUTXOs",
			Handler:    _IpcService_ListUTXOs_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _IpcService_CreateTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipc.proto",
}
